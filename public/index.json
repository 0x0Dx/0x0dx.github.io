
[{"content":"","date":"20 September 2025","externalUrl":null,"permalink":"/","section":"0x0D","summary":"","title":"0x0D","type":"page"},{"content":"","date":"20 September 2025","externalUrl":null,"permalink":"/tags/bandit/","section":"Tags","summary":"","title":"Bandit","type":"tags"},{"content":"","date":"20 September 2025","externalUrl":null,"permalink":"/blogs/","section":"Blogs","summary":"","title":"Blogs","type":"blogs"},{"content":"","date":"20 September 2025","externalUrl":null,"permalink":"/tags/ctf/","section":"Tags","summary":"","title":"Ctf","type":"tags"},{"content":"","date":"20 September 2025","externalUrl":null,"permalink":"/tags/linux/","section":"Tags","summary":"","title":"Linux","type":"tags"},{"content":"This is my personal portfolio project — a place where i will showcase my work and experiments.\nI have build this project to share all my projects in one place.\nFeatures #\rShowcases my projects with descriptions and images Clean, simple design for easy browsing Easy to update as I add new work Tech / Tools #\rBuilt using Hugo Using the Blowfish theme Contents are written in markdown Portfolio Screenshot\rThis project is ongoing — I plan to add more work, include interactive demos, and make it fully mobile-friendly.\n","date":"20 September 2025","externalUrl":null,"permalink":"/projects/portfolio/","section":"Projects","summary":"\u003cp\u003eThis is my personal portfolio project — a place where i will showcase my work and experiments.\u003c/p\u003e\n\u003cp\u003eI have build this project to share all my projects in one place.\u003c/p\u003e","title":"My Portfolio","type":"projects"},{"content":"","date":"20 September 2025","externalUrl":null,"permalink":"/tags/overthewire/","section":"Tags","summary":"","title":"Overthewire","type":"tags"},{"content":"A compact, readable walkthrough for OverTheWire: Bandit. Each level has: Password, Goal, Commands you may need, Solution (succinct commands to run), and a Tip.\nQuick setup #\rSSH host: bandit.labs.overthewire.org SSH port: 2220 Example login:\nssh bandit0@bandit.labs.overthewire.org -p 2220 Walkthrough (0 → 17) #\rLevel 0 → 1 #\rPassword: bandit0\nGoal Log in via SSH and retrieve the password for level 1 from the file readme.\nCommands you may need ssh, ls, cat, pwd\nSolution\nssh bandit0@bandit.labs.overthewire.org -p 2220 # password: bandit0 cat readme Tip Always exit or Ctrl-D to log out before SSHing to the next level.\nLevel 1 → 2 #\rPassword: ZjLjTmM6FvvyRnrb2rfNWOZOTa6ip5If\nGoal The next password is in a file named - in the home directory.\nCommands you may need ls, cat, file\nSolution\nssh bandit1@bandit.labs.overthewire.org -p 2220 # use ./- to avoid treating \u0026#39;-\u0026#39; as an option cat ./- Tip Prefix with ./ (or use the full path) for filenames beginning with -.\nLevel 2 → 3 #\rPassword: 263JGJPfgU6LtdEvgfWU1XP5yac29mFx\nGoal The next password is in a file called spaces in this filename.\nCommands you may need ls, cat\nSolution\nssh bandit2@bandit.labs.overthewire.org -p 2220 cat ./\u0026#34;--spaces in this filename--\u0026#34; Tip Quotes handle spaces in filenames.\nLevel 3 → 4 #\rPassword: MNk8KNH3Usiio41PRUEoDFPqfxLPlSmx\nGoal Find a hidden file inside the inhere directory that contains the password.\nCommands you may need ls -a, file, cat, find\nSolution\nssh bandit3@bandit.labs.overthewire.org -p 2220 ls -a inhere cat inhere/...Hiding-From-You Tip ls -a reveals dotfiles; file helps spot human-readable files.\nLevel 4 → 5 #\rPassword: 2WmrDFRmJIq3IPxneAaMGhap0pFhF3NJ\nGoal The password is in the only human-readable file inside the inhere directory.\nCommands you may need file, cat, ls, find\nSolution\nssh bandit4@bandit.labs.overthewire.org -p 2220 file inhere/* # find the file that says \u0026#34;ASCII text\u0026#34; cat inhere/\u0026lt;that-file\u0026gt; Tip file quickly separates text files from binaries and junk.\nLevel 5 → 6 #\rPassword: 4oQYVPkxZOOEOO5pTW81FB8j8lxXGUQw\nGoal Find a human-readable file under inhere that is exactly 1033 bytes and not executable.\nCommands you may need find, file, cat\nSolution\nssh bandit5@bandit.labs.overthewire.org -p 2220 # find files of size 1033 bytes, not executable find . -type f -size 1033c ! -executable 2\u0026gt;/dev/null -exec file {} \\; -print # then cat the matching file cat ./path/to/matching-file Tip Use 2\u0026gt;/dev/null to ignore permission errors.\nLevel 6 → 7 #\rPassword: HWasnPhtq9AVKe0dmk45nxy20cvUa6EG\nGoal Find the file owned by user bandit7, group bandit6, and size 33 bytes.\nCommands you may need find, ls, cat\nSolution\nssh bandit6@bandit.labs.overthewire.org -p 2220 find / -type f -size 33c -user bandit7 -group bandit6 2\u0026gt;/dev/null -print # once found: cat /path/to/file Tip Search from / if home dirs don\u0026rsquo;t contain it; redirect errors to keep output clean.\nLevel 7 → 8 #\rPassword: morbNTDkSW6jIlUc0ymOdMaLnOlFVAaj\nGoal In data.txt, locate the password next to the word millionth.\nCommands you may need sort, grep, awk, sed, strings\nSolution\nssh bandit7@bandit.labs.overthewire.org -p 2220 # find lines containing \u0026#39;millionth\u0026#39; grep -n \u0026#34;millionth\u0026#34; data.txt # or sort then grep if helpful sort data.txt | grep \u0026#34;millionth\u0026#34; # extract the word next to it (adjust field separator if needed) grep \u0026#34;millionth\u0026#34; data.txt | awk \u0026#39;{for(i=1;i\u0026lt;=NF;i++) if($i==\u0026#34;millionth\u0026#34;) print $(i+1)}\u0026#39; Tip Data files can be messy; try strings if file looks binary.\nLevel 8 → 9 #\rPassword: dfwvzFQi4mU0wfNbFOe9RoWskMLg7eEc\nGoal In data.txt: find the single line that occurs only once (all others repeat).\nCommands you may need sort, uniq, grep\nSolution\nssh bandit8@bandit.labs.overthewire.org -p 2220 sort data.txt | uniq -u Tip uniq -u prints lines that appear exactly once (input must be sorted).\nLevel 9 → 10 #\rPassword: 4CKMh1JI91bUIZZPXDqGanal4xvAg0JM\nGoal In data.txt: identify human-readable strings preceded by several = characters.\nCommands you may need strings, grep\nSolution\nssh bandit9@bandit.labs.overthewire.org -p 2220 strings data.txt | grep -E \u0026#34;=+\u0026#34; Tip strings extracts readable sequences from binary blobs.\nLevel 10 → 11 #\rPassword: FGUW5ilLVJrxX9kMYMmlN4MgbpfMiqey\nGoal data.txt contains base64-encoded data; decode it to reveal the password.\nCommands you may need strings, base64, grep\nSolution\nssh bandit10@bandit.labs.overthewire.org -p 2220 strings data.txt | base64 -d # or, if the data is embedded: strings data.txt | grep -v \u0026#39;[[:space:]]\u0026#39; | base64 -d Tip If base64 -d complains, try trimming non-base64 characters first.\nLevel 11 → 12 #\rPassword: dtR173fZKb0RRsDFSGsg2RWnpNVj3qRr\nGoal data.txt is ROT13 encoded (letters rotated by 13); decode it to get the password.\nCommands you may need tr, strings\nSolution\nssh bandit11@bandit.labs.overthewire.org -p 2220 strings data.txt | tr \u0026#39;A-Za-z\u0026#39; \u0026#39;N-ZA-Mn-za-m\u0026#39; Tip ROT13 is symmetric: the same transform encodes and decodes.\nLevel 12 → 13 #\rPassword: 7x16WNeHIi5YkIhWsfFIqoognUTyj9Q4\nGoal The file data.txt is a hexdump of another file that has been repeatedly compressed. You need to reverse the hexdump, then keep extracting/decompressing until you reach the password. Work in a temporary directory so you don’t clutter the home folder.\nCommands you may need xxd, file, gunzip, bunzip2, tar, mkdir, cp, mv\nSolution\nssh bandit12@bandit.labs.overthewire.org -p 2220 # Create temporary working directory cd /tmp WORKDIR=$(mktemp -d) cd $WORKDIR # Copy hexdump cp ~/data.txt . # Step 1: reverse hexdump xxd -r data.txt data # Step 2: gzip decompress mv data data.gz \u0026amp;\u0026amp; gunzip data.gz # Step 3: bzip2 decompress mv data data.bz2 \u0026amp;\u0026amp; bunzip2 data.bz2 # Step 4: gzip decompress again mv data data.gz \u0026amp;\u0026amp; gunzip data.gz # Step 5: extract first tar archive mv data data.tar \u0026amp;\u0026amp; tar -xf data.tar # check extracted files ls # Step 6: extract second tar archive # replace \u0026lt;filename\u0026gt; with actual extracted file name from previous step tar -xf \u0026lt;extracted-file-from-step5\u0026gt; ls # Step 7: bzip2 decompress # replace \u0026lt;filename\u0026gt; with actual .bz2 file bunzip2 \u0026lt;extracted-file-from-step6\u0026gt; # Step 8: extract tar if needed # replace \u0026lt;filename\u0026gt; with actual extracted file tar -xf \u0026lt;extracted-file-from-step7\u0026gt; ls # Step 9: final gzip decompress # replace \u0026lt;filename\u0026gt; with final .gz file mv \u0026lt;extracted-file-from-step7\u0026gt; data8.gz gunzip data8.gz # Step 10: read the password cat \u0026lt;final-text-file\u0026gt; Tip After each step, always run file \u0026lt;filename\u0026gt; to know the next decompression tool to use. Eventually, you’ll reveal the password.\nLevel 13 → 14 #\rPassword: FO5dwFsc0cbaIiH0h8J2eUks2vdTDwAn\nGoal You are given a private SSH key (instead of the password file). Use that key to SSH as user bandit14 and read /etc/bandit_pass/bandit14.\nCommands you may need ssh -i, chmod, cat\nSolution\nssh bandit13@bandit.labs.overthewire.org -p 2220 ls exit scp -P 2220 bandit13@bandit.labs.overthewire.org:sshkey.private . chmod 600 sshkey.private ssh -i sshkey.private bandit14@bandit.labs.overthewire.org -p 2220 Tip chmod 600 on the key avoids OpenSSH refusing to use it.\nLevel 14 → 15 #\rPassword: You get from 'Level 13 → 14' the sshkey.private\nGoal Submit the password for the current level to localhost port 30000; the server will return the next password.\nCommands you may need nc (netcat), cat\nSolution\nssh bandit14@bandit.labs.overthewire.org -p 2220 # send current password to localhost:30000 and receive next password cat /etc/bandit_pass/bandit14 | nc localhost 30000 Tip If nc isn\u0026rsquo;t available, telnet localhost 30000 can work interactively.\nLevel 15 → 16 #\rPassword: 8xCjnmgoKbGLhHFAZlGE5Tmu4M2tKJQo\nGoal Submit the current level password to localhost port 30001 using SSL/TLS; one SSL server will return the next password.\nCommands you may need openssl s_client, nc, nmap\nSolution\nssh bandit15@bandit.labs.overthewire.org -p 2220 # scan for listening ports in the general area if needed: nmap -p 30000-31000 localhost # connect with openssl and send the password echo \u0026#34;CURRENT_PASSWORD\u0026#34; | openssl s_client -connect localhost:30001 -quiet # or: cat /etc/bandit_pass/bandit15 | openssl s_client -connect localhost:30001 -quiet Tip Use -quiet and try -ign_eof if the connection behaves oddly; read man s_client for the interactive commands.\nLevel 16 → 17 #\rPassword: kSkvUpMQ7lBYyCM4GBPvCvT1BfWRy0Dx\nGoal Find which port in the range 31000–32000 on localhost will return the next password when you submit the current password; test which of those ports use SSL and which do not.\nCommands you may need nmap, openssl s_client, nc\nSolution\nssh bandit16@bandit.labs.overthewire.org -p 2220 # find open ports in range nmap -p 31000-32000 localhost # test SSL and non-SSL endpoints; example: cat /etc/bandit_pass/bandit16 | nc localhost \u0026lt;port\u0026gt; # or for SSL: cat /etc/bandit_pass/bandit16 | openssl s_client -connect localhost:\u0026lt;port\u0026gt; -quiet The password you will get is kSkvUpMQ7lBYyCM4GBPvCvT1BfWRy0Dx\nTip One port will give the actual password; others echo what you sent. nmap is handy to find open ports quickly.\nNotes #\rUse file, strings, and xxd liberally — they’re lifesavers for binary/text distinctions. When in doubt, read man pages for the tools suggested. ","date":"20 September 2025","externalUrl":null,"permalink":"/blogs/overthewire_bandit/","section":"Blogs","summary":"\u003cp\u003eA compact, readable walkthrough for \u003cstrong\u003eOverTheWire: Bandit\u003c/strong\u003e.\nEach level has: \u003cstrong\u003ePassword\u003c/strong\u003e, \u003cstrong\u003eGoal\u003c/strong\u003e, \u003cstrong\u003eCommands you may need\u003c/strong\u003e, \u003cstrong\u003eSolution\u003c/strong\u003e (succinct commands to run), and a \u003cstrong\u003eTip\u003c/strong\u003e.\u003c/p\u003e\n\u003chr\u003e\n\r\n\u003ch2 class=\"relative group\"\u003eQuick setup \r\n    \u003cdiv id=\"quick-setup\" class=\"anchor\"\u003e\u003c/div\u003e\r\n    \r\n    \u003cspan\r\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100 select-none\"\u003e\r\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline\" href=\"#quick-setup\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\r\n    \u003c/span\u003e        \r\n    \r\n\u003c/h2\u003e\r\n\u003cp\u003eSSH host: \u003ccode\u003ebandit.labs.overthewire.org\u003c/code\u003e\nSSH port: \u003ccode\u003e2220\u003c/code\u003e\nExample login:\u003c/p\u003e","title":"OverTheWire: Bandit","type":"blogs"},{"content":"","date":"20 September 2025","externalUrl":null,"permalink":"/tags/portfolio/","section":"Tags","summary":"","title":"Portfolio","type":"tags"},{"content":"","date":"20 September 2025","externalUrl":null,"permalink":"/projects/","section":"Projects","summary":"","title":"Projects","type":"projects"},{"content":"","date":"20 September 2025","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"20 September 2025","externalUrl":null,"permalink":"/tags/walkthrough/","section":"Tags","summary":"","title":"Walkthrough","type":"tags"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","externalUrl":null,"permalink":"/tags/security/","section":"Tags","summary":"","title":"Security","type":"tags"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]